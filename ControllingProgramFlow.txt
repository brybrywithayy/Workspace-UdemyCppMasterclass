// SECTION 9 - CONTROLLING PROGRAM FLOW

Control Flow Structures

    With the following 3 elements, we can implement ANY algorithm

    1) Sequence - Ordering statements sequentially
        - simply the order in which operations take place
        - determined by the developer/programmer while writing the program
        
    2) Selection - Making decisions
        
        IF STATEMENTS
            - If a condition is true, then do something
                - if false, skip!
                - Can use failing condition as well
            - simple binary decision
            - Can nest if statements within one another
            - Conditional operator (if else statement in one operator)
            
            - Syntax
                if (expr)
                    statement;
                    
              Ex:
                if (num > 10)
                    ++num;
                    
                if (selection == 'A')
                    cout << "You selected A";
                
                if (num > 10)
                    cout << "num is greater than 10";
                    
                if (health < 100 && player_healed)
                    health = 100;
                    
             - We can execute more than one statement if the condition is true
                - Block statements, denoted by curly brackets {}
                    - blocks of code that have a common scope
                        - everything within the block remains local to the block
                            - not visible beyond the code block
                    - can contain variable declarations (i.e. local variables)
                    
                    Ex:
                        if (num > 10) {
                            ++num;
                            cout << "this too";
                        }
                        
        IF-ELSE STATEMENTS
        
            - else block is simply a branching path
            
            Syntax:
                if (expr)
                    statement1;
                else
                    statement2;
                    
            Example1:
            
                if (num > 10)
                    ++num;
                else
                    num = 10;
                    
            Example2:
                if (num > 10)
                    cout << "num is greater than 10";
                else
                    cout << "num is not greater than 10";
                
            Example3:    
                if (health < 100 && heal_player)
                    health = 100;
                else
                    ++health;
            
            Example4:   
                if (score > 90)
                    cout << "A";
                else if (score > 80)
                    cout << "B";
                else if (score > 70)
                    cout << "C";
                else if (score > 60)
                    cout << "D";
                else
                    cout << "F";
                    
                cout << "Done";
                
        NESTED IF STATEMENTS
        
            - can use an if statement anywhere a statement is legal
            - can test multiple complex conditions easily
            - "dangling else problem" in computer science
                - which if statement does an else belong to?
                    - In C++ its the closest, previous if of same scope
                    
              Example1:
                if (score > 90)
                    if (score > 95)
                        cout << "A+";
                    else
                        cout << "A";
                        
                else
                    cout << "Sorry, no A";
        
                Example2:
                    if (score_frank != score_bill) {
                        if (score_frank > score_bill) {
                            cout << "Frank Wins" << endl;
                        } else {
                            cout << "Bill Wins" << endl;
                        }
                    } else {
                        cout << "Looks like a tie!" << endl;
                    }
                    
         SWITCH STATEMENT
            - Easier to use for longer if-else statements
            - "fall through" behavior
                - break will terminate the loop
                - if break is missing, the next case(s) will execute until the compiler hits one
                    - best practice is to always have these in each case
            - Syntax is more involved
                - Switch Statement Rules:
                    - control expression must evaluate to an integer type
                    - case expressions must be constant expressions that evaluate
                      to integers or integer literals
                    - once a match occurs all following case sections are executes
                      UNTIL a break is reached or the switch completes
                    - Best Practice: always provide a break
                    - Best Practice: always handle default even though its optional
                
              SYNTAX:  
              
                switch (integer_control_expr) {
                    case expression1: statement1; break;
                    case expression2: statement2; break;
                    case expression3: statement3; break;
                    case expression...etc
                    default: statement_default; // note theres no break here
                }
                
                Example1:
                
                    switch (selection) {                // selection is a char, which can include single ints
                        case '1': cout << "1 selected";
                                  break;
                        case '2': cout << "2 selected";
                                  break;
                        case '3': 
                        case '4': cout << "3 or 4 selected";  // similar to OR statement
                                  break;
                        default:  cout << "1, 2, 3, 4, NOT selected";  // optional default
        
                Example2: (very common use case for switch)
                
                    enum Color {
                        red, green, blue
                    };
                    Color screen_color {green};
                    
                    ----------------------------
                    
                    switch (screen_color) {
                        case red:   cout << "red"; break;
                        case green: cout << "green"; break;
                        case blue:  cout << "blue"; break;
                        default:    cout << "should never execute;
                        
         CONDITIONAL OPERATOR (?:) also called Ternary Operator
            
                - similar to if-else construct, but as single expression
                - is a type of ternary operator (works on 3 operands)
                - very useful when used in-line
                    - very easy to over-use
                
                How Does It Work?
                    - Syntax:
                        (cond_expr) ? expr1 : expr2
                        
                    - cond_expr evaluates to a boolean
                        - if cond_expr is true, then value of expr1 is returned
                        - if cond_expr is false, then value of expr2 is returned
                        
                    Example1:
                        
                        int a {10}, b {20};
                        int score {92};
                        int result {};
                        
                        result = (a > b) ? a : b;
                        
                        result = (a < b) ? (b-a) : (a-b);
                        
                        result = (b != 0) ? (a/b) : 0;
                        
                        cout << ((score > 90) ? "Excellent" : "Good");
                    
                    
                    
    3) Iteration - Looping or repeating
        - Looping also called iteration or repetition
        - third basic building block of programming
        - allows execution of a statement or block of statements to be repeated
        - Loops have two parts
            - condition
                - determines when to iterate and when to end
            - body code
                - statements to execute
                
        - Typical use cases to execute a loop:
            - specified number of times to execute code
            - for each element in a collection
            - while a condition is true
            - until a condition becomes false
            - until the end of an input stream is reached
            - forever (OS a good example, system processes run continually)
            - etc.
            
        - C++ Looping Constructs
            - for loop                  
                - iterates a specific number of times
            - range-based for loop      
                - one iteration for each element in a range or collection
            - while loop                
                - iterate while a condition remains true
                - stop when a condition becomes false
                - check condition at the beginning of every iteration
            - do-while loop
                - iterate while condition remains true
                - stop when condition becomes false
                - check the condition at the end of every iteration
        
        For Loop
            - basic for loop is concise, easy to read and modify
            - for loop's expressions are all optional
                - possible to have:
                    - no initialization
                    - no test condition
                    - no incrementation
            - Used heavily for looping statements multiple times
            - very efficient in C++
            - Syntax:
            
                for (initialization; condition; increment)  // note that these parameters are all optional
                    statement;
                    
                // OR
                
                for (init; condition; increment) {
                    statement1;
                    statement2;
                    etc
                }
                
            Example1:
                int i {0};
                
                for (i = 1; i <= 5; ++i)
                    cout << i << endl;
                    
                // Will print the following to console:
                // 1
                // 2
                // 3
                // 4
                // 5
            
            Example2:
                for (int i {1}; i <= 5; ++i)  // initialization style
                    cout << i << endl;
                    
                for (int i = 1; i <= 5; ++i)  // assignment style
                    cout << i << endl;
                    
            Example3:
                for (int i {1}; i <= 10; ++i) {  // looping from 1 to 10
                    if (i % 2 == 0)                 // checking for even numbers
                        cout << i << endl;          // displaying only evens
                }
                
            Example4:
                int scores [] {100,90,87};
                
                for (int i {0}; i < 3; ++i) {   // i is an integer less than 3 (stops at 2)
                    cout << scores[i] << endl;
                }
                
                for (int i {0}; i <= 2; ++i) {  // i is an integer less than or equal to 2 (also stops at 2)
                    cout << scores[i] << endl;
                }
                
                // beware 'off by one' errors caused by incorrectly bounding the loop to the array size
        
            
            Comma Operator
                - note that accociativity is RIGHT TO LEFT
                
                for (int i {1}; j {5}; i <= 5; ++i, ++j) {
                    cout << i << " * " << j << " = " << (i * j) << endl;
                }
                
                // will display times table for i and j
        
            Example5:
                for (;;)
                    cout << "Endless loop" << endl;
                    
                // this for loop has no expressions for parameters and will continue infinitely
                // Tip: if you're going to omit expressions, just use a different looping structure
        
        
        Range-based For Loop (Added in C++11)
            - loops through a collection of elements, accessing each one
                - not concerned with
                    - incrementing, decrementing counter (in the iteration)
                    - length of the data structure (in the condition)
                    - subscripting of data structure elements (in the body)
                    
            - Syntax:
                
                for (var_type var_name: sequence)
                    statement;  // can use var_name
                    
                for (var_type var_name: sequence) {
                    statements; // can use var_name
                }
                
              Example1:
              
                int scores [] {100,90,97};
                
                for (int score : scores)
                    cout << score ,, endl;
                    
                // will print:
                // 100
                // 90
                // 97
                
              Example2 (auto keyword)
                
                int scores [] {100,90,97}
                
                for (auto score : scores)  // compiler determines correct datatype
                    cout << score << endl;
                    
              Example3 (with vectors)
              
                  vector<double> temps {87.2, 77.1, 80.0, 72.5};
                  
                  double average_temp {};
                  double running_sum {};
                  
                  for (auto temp : temps)               // iterate over vector
                      running_sum += temp;              // total all temps
                      
                  average_temp = running_sum / temps.size();  // get average
                  
                  
               Example4 (with initializer list)
               
                  // explicitly include collection in the loop
                  // no outside data structure
                  // Must track the size as it runs!
               
                  double average_temp {};
                  double running_sum {};
                  int size {0};
                  
                  for (auto temp: {60.2, 80.1, 90.0, 78.2}) {
                      running_sum += temp;
                      ++size;
                  }
                  average_temp = running_sum / size;
                  
                Example (with string)
                    // keep in mind that strings are collections of characters
                
                    for (auto c: "Frank")
                        cout << c << endl;
                  
        While Loop
            - a pre-test loop
                - test is done at the beginning of the loop
                    - if it fails immediately, then the loop never executes
            - Syntax:
                
                while (expression)      // expr evaluates to boolean
                    statement;
                    
                while (expression) {
                    statements;
                }
                
            Example1 - simple while loop
                int i {1};
                
                while (i <= 5) {
                    cout << i << endl;
                    ++i;    // important to increment, otherwise loop is infinite
                    
            Example2 - Display even numbers
                int i {1};
                
                while (i <= 10) {
                    if (i % 2 == 0)         // triggers on only even numbers in range
                        cout << i << endl;
                    ++i;                    // increment i regardless of the if
                }
                
            Example3 - array
                int scores [] {100,90,97};
                int i {0};
                
                while (i < 3) {                 // length of the array
                    cout << scores[i] << endl;  // element subscript
                    ++i;                        // increment
                }
                
            // Common use case is in input validation!
            
            Example4 - input validation (Very common use case!)
                int number {};
                
                cout << "Enter an integer less than 100: ";
                cin >> number;
                
                while (number >= 100) {
                    cout << "Enter an integer less than 100";
                    cin >> number;
                }
                
                cout << "Thanks" << endl;
                
            Example5 - input validation with 2 parameters
                int number {};
                
                cout << "Enter an integer between 1 and 5: ";
                cin >> number;
                
                while (number <= 1 || number >= 5) {
                    cout << "Enter an integer between 1 and 5: ";
                    cin >> number;
                }
                
                cout << "Thanks" << endl;
                
            Example6 - input validation with boolean flag instead of counter
                bool done {false};
                int number {0};
                
                while (!done) {
                    cout << "Enter an integer between 1 and 5: ";
                    cin >> number;
                    if (number <= 1 || number >= 5)
                        cout << "Out of range, try again" << endl;
                    else {
                        cout << "Thanks!" << endl;
                        done = true;                // don't forget to set flag
                    }
        
        Do-While Loop
            - post-test loop
                - checks condition after running at least once
                - do-while is guaranteed to run at least one iteration
            - Note the semicolon after the condition
            - consider using do-while loop if you want to iterate at least once
        
            - Syntax:
                
                do {
                    statements;
                } while (expression);
                
                
            Example1 - input validation
            
                int number {};
                do {
                    cout << "Enter an integer between 1 and 5: ";
                    cin >> number;
                } while (number <= 1 || number >= 5);
                
                cout << "Thanks!" << endl;
                
                
            Example2 - area calculation that loops back to user input
                
                char selection {};
                
                do {
                    double width {}, height {};
                    cout << "Enter width and height separated by a space: ";
                    cin >> width >> height;
                    
                    double area {width * height};
                    cout << "The area is " << area << endl;
                    
                    cout << "Calculate another? (Y/N): ";
                    cin >> selection;
                } while (selection == 'Y' || selection == 'y');
                
                cout << "Thanks!" << endl;
                
                
        
        Continue and Break Statements
            - can be used within ALL C++ LOOP constructs
            
            Continue
                - no further statements in the body are executed
                - control immediately goes to the beginning of the loop 
                  for the next iteration
                  
            Break
                - no further statements in the body are executed
                - loop is immediately terminated
                - control immediately goes to the next statement after the loop
                
                Example1:
                
                    vector<int> values {1,2,-1,3,-99,7,8,10};  // neg values represent garbage that gets into data structures
                    
                    for (auto val: values) {
                        if (val == -99)         // end loop when hit -99
                            break;
                        else if (val == -1)     // skip over when hit -1
                            continue;
                        else
                            cout << val << endl;
                    }
                    
                    // this will print the following:
                    // 1
                    // 2
                    // 3
        
        Infinite Loops
            - Loop whose condition (control) expression always evaluates to true
            - these usually happen as programmer errors
            - occassionally these are used with break statements in the body
              to control their behavior
            - can be useful in certain cases:
                - event loop in an event-driven program 
                    - embedded systems, mobile systems in the form of listeners
                - operating system processes
                    - constantly looping to handle resources and I/O
            
            Example1: Infinite For Loop
            
                for (;;)        
                    cout << "This will print forever" << endl;
                    
            Example2: Infinite While Loop
            
                while (true)        // can also use an expression that is always true like 10 < 12
                    cout << "This will print forever" << endl;
                    
            Example3: Do-While
                
                do {
                    cout << "This will print forever" << endl;
                } while (true);
                
            Example4: infinite loop that has an exit condition
                
                while (true) {
                    char again {};
                    cout << "Do you want to loop again? (Y/N): ";
                    cin >> again;
                    
                    if (again == 'N' || again == 'n')
                        break;
                }
        
        Nested Loops
            - simply a loop nested within another loop
            - can be as many levels deep as the program needs
            - very useful with multidimensional data structures (arrays, vectors)
            - nested loops are referred to as Outer and Inner loops
            
            Example1: Pseudocode
                
                for (outer_val {1}; outer_val <= 2; ++outer_val)
                    for (inner_val {1}; inner_val <= 3; ++inner_val)
                        cout << outer_val << ", " << inner_val << endl;
                 
                // Note: inner loop will loop "faster"       
                // output will follow format: 
                // outer_val, inner_val
                // 1, 1
                // 1, 2
                // 1, 3
                // 2, 1
                // 2, 2
                // 2, 3
   
            Example2: multiplication table
                // displays 10 x 10 multiplication table
                // body of the inner loop simply multiplies
                // the outer loop and inner loop variables
            
                for (int num1 {1}; num1 <= 10; ++num1) {
                    for (int num2 {1}; num2 <= 10; ++num2) {
                        cout << num1 << " * " << num2 << " = " << num1 * num2 << endl;
                    }
                    cout << "------------------" << endl;
                }
                
                
            Example3: 2D array, ASSIGN elements
            
                // note the conditional is < 5 and < 3 for both loops
                // this is because of the array size (5 = 0-4, 3 = 0-2)
                
                
                int grid[5][3] {};
                
                for (int row {0}; row < 5; ++row) {
                    for (int col {0}; col < 3; ++col) {
                        grid[row][col] = 1000;
                    }
                }
   
            Example4: 2D array, DISPLAY elements
   
                for (int row {0}; row < 5; ++row) {
                    for (int col {0}; col < 3; ++col) {
                        cout << grid[row][col] << " ";
                    }
                    cout << endl;
                }
   
            Example5: 2D vector, DISPLAY elements
            
                /*
                 *  Vector of int vectors
                 *  each is a different size, 3,4,5
                 */
            
                vector<vector<int>> vector_2d
                {
                    {1,2,3},                // vector 1 has 3 ints
                    {10,20,30,40},          // vector 2 has 4 ints
                    {100,200,300,400,500},  // vector 3 has 5 ints
                };
                
                for (auto vec: vector_2d) {     // auto = vector<int>
                    for (auto val: vec) {       // auto = int
                        cout << val << " ";
                    }
                    cout << endl;
                }
   
   
   
   
   
